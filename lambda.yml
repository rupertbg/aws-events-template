AWSTemplateFormatVersion: 2010-09-09
Description: Example of an AWS Events-driven Lambda

Parameters:

  LambdaBucketName:
    Type: String
    Description: The name of the S3 bucket that has the code

  S3FunctionCodeVersion:
    Type: String
    Description: The S3ObjectVersion for the function code

  IAMPrefix:
    Type: String
    Description: A namespace for the Roles and Policies for this workload

Resources:

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(12 hours)
      State: ENABLED
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: !Ref Lambda

  ScheduledEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule.Arn

  APIEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - DeleteBucket
            - DeleteBucketCors
            - DeleteBucketLifecycle
            - DeleteBucketPolicy
            - DeleteBucketReplication
            - DeleteBucketTagging
            - DeleteBucketWebsite
            - CreateBucket
            - PutBucketAcl
            - PutBucketCors
            - PutBucketLifecycle
            - PutBucketPolicy
            - PutBucketLogging
            - PutBucketNotification
            - PutBucketReplication
            - PutBucketTagging
            - PutBucketRequestPayment
            - PutBucketVersioning
            - PutBucketWebsite
            - PutBucketEncryption
            - DeleteBucketEncryption
            - DeleteBucketPublicAccessBlock
            - PutBucketPublicAccessBlock
      State: ENABLED
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: !Ref Lambda

  APIEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt APIEventRule.Arn

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref AWS::StackName
      Handler: index.handler
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: code.zip
        S3ObjectVersion: !Ref S3FunctionCodeVersion
      Runtime: python3.7

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${IAMPrefix}-lambda
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub ${IAMPrefix}-lambda
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:ListAllMyBuckets
                - s3:GetBucketPublicAccessBlock
                - s3:PutBucketPublicAccessBlock
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
